#include <cstdlib>

#include <vector>
#include <string>
#include <algorithm>
#include <iostream>
#include <sstream>
#include <iterator>
#include <cstdlib>

#include <unistd.h>

std::string get_working_path() {
   char temp[256];
   return (getcwd(temp, sizeof(temp)) ? std::string{temp} : std::string{});
}

std::string vec_to_str(const std::vector<std::string>& args) {
    std::ostringstream imploded;

    std::copy(
        args.begin(), 
        args.end(),
        std::ostream_iterator<std::string>(imploded, " ")
    );

    return imploded.str();
}

int main(int argc, char *argv[], char **envp) {
    std::string error;

    std::cout << ">>>>> Currend directory:" << std::endl 
              << get_working_path() << std::endl;

    std::cout << ">>>>> Args:" << std::endl;
    for (int i = 1; i < argc; ++i) {
        std::cout << argv[i] << std::endl;
    }

    std::string project_dir;
    const char* workspace_dir = std::getenv("BUILD_WORKSPACE_DIRECTORY");
    if (workspace_dir) {
        project_dir = workspace_dir;
    } else {
        std::cerr << "No 'BUILD_WORKSPACE_DIRECTORY' env set" << std::endl;
        return 1;
    }

    std::vector<std::string> args {
        "{java}",
        {jvm_flags}
        "-jar",
        "{binary}",
    };

    for (int i = 1; i < argc; ++i) {
        args.push_back(argv[i]);
    }

    args.push_back(project_dir);

    std::string cmd = vec_to_str(args);
    std::cout << ">>>>> Running:" << std::endl << cmd << std::endl;

    return std::system(cmd.c_str());
}